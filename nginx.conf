# nginx.conf (为您的文件结构量身定制的最终版本)

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name mcp.so.kg;

    # --- SSL 配置 ---
    ssl_certificate /etc/nginx/certs/live/mcp.so.kg/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/live/mcp.so.kg/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    # 建议保留其他安全相关的 SSL 设置
    add_header Strict-Transport-Security "max-age=63072000" always;

    # --- 基础配置 ---
    # 网站根目录指向容器内的 /usr/share/nginx/html
    root /usr/share/nginx/html;
    index index.html;
    charset utf-8;

    # --- 错误页面 ---
    # 您的 404.html 在根目录，所以这个配置是正确的
    error_page 404 /404.html;

    # --- 静态资源缓存配置 (放在 location / 前面) ---
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|webp|woff|woff2|ttf|eot)$ {
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

     # 这个 location 块会捕获所有直接访问 content 文件夹下 .html 文件的请求
    location ~ ^/content/(.*)\.html$ {
        # 使用 301 永久重定向到不带 .html 和 /content/ 的漂亮链接
        # $1 会捕获 (.*) 里的内容，比如 "about"
        return 301 /$1;
    }
 
    # --- 核心路由逻辑 ---
    # 这个 location 块将处理您所有的页面请求
    location / {
        # 这就是魔法发生的地方！
        try_files $uri $uri/ /content/$uri.html /content/$uri =404;
    }

    location = /404.html {
        internal;
    } 
}

# --- HTTP 到 HTTPS 的重定向 ---
server {
    listen 80;
    listen [::]:80;
    server_name mcp.so.kg;
    return 301 https://$server_name$request_uri;
}